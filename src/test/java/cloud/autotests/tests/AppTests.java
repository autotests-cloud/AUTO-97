package cloud.autotests.tests;

import com.codeborne.selenide.ElementsCollection;
import com.codeborne.selenide.Selectors;
import com.codeborne.selenide.SelenideElement;
import io.qameta.allure.Description;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static cloud.autotests.helpers.DriverHelper.getConsoleLogs;
import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static io.qameta.allure.Allure.step;
import static org.assertj.core.api.Assertions.assertThat;


public class AppTests extends TestBase {
    private final String baseUrl = "https://vsenauka.ru/knigi/vsenauchnyie-knigi/";
    private final String author = "Саган";
    private final String name = "Голубая";
    private final String expectedAuthorName = "Саган, Карл";
    private final String expectedBookName = "Голубая точка. Космическое будущее человечества";

    @Test
    @Description("Soon to be implemented by QA.GURU engineers")
    @DisplayName("Проверить работу поиска")
    void generatedTest() {
        step("Открыть " + baseUrl, () ->
                open(baseUrl));

        step(String.format("В поле \"Автор\" установить значение \"%s\"", author), () ->
                $("[name=author]").val(author));

        step(String.format("В поле \"Название\" установить значение \"%s\"", name), () ->
                $("[name=title]").val(name));

        step("Нажать \"Найти\"", () ->
                $(Selectors.byText("Найти")).click());

        step(String.format("Ожидаемый результат: в поиске выдана 1 книга \"%s '%s'\"", expectedAuthorName, expectedBookName), () -> {
            ElementsCollection bookItems = $$(".book-result").filter(not(attribute("hidden")));
            bookItems.shouldHaveSize(1);

            SelenideElement firstBookItem = bookItems.first();
            firstBookItem.$(".title-1").shouldHave(text(expectedAuthorName));
            firstBookItem.$(".title-2").shouldHave(text(expectedBookName));
        });
    }

    @Test
    @Description("Autogenerated, because test steps contain text 'http...' and the page has 'title' tag")
    @DisplayName("Page title should have header text")
    void titleTest() {
        step("Open url " + baseUrl, () ->
                open(baseUrl));

        step("Page title should have text 'Навигатор | Всенаука'", () -> {
            String expectedTitle = "Навигатор | Всенаука";
            String actualTitle = title();

            assertThat(actualTitle).isEqualTo(expectedTitle);
        });
    }

    @Test
    @Description("Autogenerated, because test steps contain text 'http...'")
    @DisplayName("Page console log should not have errors")
    void consoleShouldNotHaveErrorsTest() {
        step("Open url " + baseUrl, () ->
                open(baseUrl));

        step("Console logs should not contain text 'SEVERE'", () -> {
            String consoleLogs = getConsoleLogs();
            String errorText = "SEVERE";

            assertThat(consoleLogs).doesNotContain(errorText);
        });
    }
}